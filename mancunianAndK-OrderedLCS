#include<bits/stdc++.h>
using namespace std;
//int KorderedLcs(int* a,int* b, int i,int j,int k,int n,int m) {//3^n,......???
//	if (i==n or j==m) {
//		return 0;
//	}
//	int ans = 0;
//	if (a[i] == b[j]) {
//		ans =  1 + KorderedLcs(a,b,i+1,j+1,k,n,m);
//	}
//
//	else {
//
//		int case1 = KorderedLcs(a,b,i,j+1,k,n,m);
//		int case2 = KorderedLcs(a,b,i+1,j,k,n,m);
//
//		int case3 = -1;
//		if (k > 0) {
//			case3 = 1 + KorderedLcs(a,b,i+1,j+1,k-1,n,m);
//		}
//
//		ans = max(case1, max(case2, case3));
//	}
//	return ans;
//}



int dp[2002][2002][6];
int KorderedLcsTopDown(int* a,int* b, int i,int j,int k,int n,int m) {//n*m*k.....
	if (i==n or j==m) {
		return 0;
	}

	if (dp[i][j][k] != -1) {
		return dp[i][j][k];
	}
	int ans = 0;
	if (a[i] == b[j]) {
		ans =  1 +KorderedLcsTopDown(a,b,i+1,j+1,k,n,m);
	}

	else {

		int case1 = KorderedLcsTopDown(a,b,i,j+1,k,n,m);
		int case2 = KorderedLcsTopDown(a,b,i+1,j,k,n,m);

		int case3 = -1;
		if (k > 0) {
			case3 = 1 + KorderedLcsTopDown(a,b,i+1,j+1,k-1,n,m);
		}

		ans = max(case1, max(case2, case3));
	}

	dp[i][j][k] = ans;

	return ans;
}




int main(int argc, char const *argv[])
{
   int n,m,k; cin>>n>>m>>k;
   int a[n],b[m];
   for(int i=0;i<n;i++){
        cin>>a[i];
   }
   for(int i=0;i<m;i++){
        cin>>b[i];
   }
   int i=0,j=0;
   // cout << KorderedLcs(a,b,i,j,k,n,m) << endl;
	for (int i = 0; i < 2002; ++i)
	{
		for (int j = 0; j < 2002; ++j)
		{
			for (int k = 0; k < 6; ++k)
			{
				dp[i][j][k] = -1;
			}
		}

	}
	cout << KorderedLcsTopDown(a,b,i,j,k,n,m) << endl;
	return 0;
}




